<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:ldap="http://www.springframework.org/schema/ldap"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/ldap
       WEB-INF/xsd/spring-ldap-2.2.xsd">


    <!-- 引入属性文件 -->
    <!--<context:component-scan base-package="com.ppms"/>-->
    <context:property-placeholder location="classpath:ldap.properties" ignore-unresolvable="true"/>
    <!--<ldap:context-source-->
    <!--id="context_source"-->
    <!--url="${sample.ldap.url}"-->
    <!--base="${sample.ldap.base}"-->
    <!--username="${sample.ldap.userDn}"-->
    <!--password="${sample.ldap.password}"-->
    <!--anonymous-read-only="false"/>-->

    <!--<bean id="context_source"-->
    <!--class="com.ppms.ldapLogin.util.LdapContextSourceBean">-->
    <!--<property name="url" value="${sample.ldap.url}" />-->
    <!--<property name="base" value="${sample.ldap.base}" />-->
    <!--<property name="userDn" value="${sample.ldap.userDn}" />-->
    <!--<property name="password" value="${sample.ldap.password}" />-->
    <!--</bean>-->

    <bean id="springsecurity" class="org.springframework.security.ldap.SpringSecurityLdapTemplate">
        <constructor-arg ref="springSecurityContextSource"/>
    </bean>
    <bean name="providerManager" class="org.springframework.security.authentication.ProviderManager">
        <constructor-arg name="providers">
            <list>
                <ref bean="ldapAuthenticationProvider"/>
            </list>
        </constructor-arg>
        <!--<property name="authenticationEventPublisher" ref="eventPublicher"></property>-->
    </bean>
    <bean id="customAuthenticationSource" class="com.ppms.ldapLogin.util.CustomAuthenticationSource"></bean>
    <bean id="authenticationKey" class="com.ppms.ldapLogin.util.CustomValuesAuthenticationSourceDecorator">
        <constructor-arg index="0" ref="customAuthenticationSource"></constructor-arg>
        <constructor-arg index="1" value="${ldap.login.account}"></constructor-arg>
        <constructor-arg index="2" value="${ldap.login.pwd}"></constructor-arg>
    </bean>
    <bean id="springSecurityContextSource" class="com.ppms.ldapLogin.util.DefaultSpringSecurityContextSourceBean">
        <constructor-arg index="0" value="${ldap.url}"/>
        <property name="authenticationSource" ref="authenticationKey"></property>
        <!--下面的方式已过期，放弃使用这方式-->
        <!--<property name="userDn" value="${security.ldap.userDn}"/>-->
        <!--<property name="password" value="${security.ldap.password}"/>-->
    </bean>
    <bean id="filterBasedLdapUserSearch" class="org.springframework.security.ldap.search.FilterBasedLdapUserSearch">
        <!--<constructor-arg index="0" value="${sample.ldap.base}"></constructor-arg>-->
        <!--因为已经在springsecurityContextSource中配置了rootdn，所以不需要再配置了-->
        <constructor-arg index="0" value="${ldap.search.baseDN}"></constructor-arg>
        <constructor-arg index="1" value="${ladp.search.filter}"></constructor-arg>
        <constructor-arg index="2" ref="springSecurityContextSource"></constructor-arg>
        <property name="returningAttributes">
            <list>
                <value>userPassword</value>
            </list>
        </property>
    </bean>
    <bean id="authoritiesPopulator" class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
        <constructor-arg index="0" ref="springSecurityContextSource"></constructor-arg>
        <constructor-arg index="1" value="${ladp.search.searchAtts}"></constructor-arg>
        <property name="rolePrefix" value=""></property>
        <property name="convertToUpperCase" value="false"></property>
    </bean>
    <bean name="ldapAuthenticationProvider"
          class="com.ppms.ldapLogin.util.CustomLdapAuthenticationProvider">
        <!--构造方法的第一个参数是配置用户名密码验证，第二个参数是查询用户对应的权限。-->
        <constructor-arg index="0">
            <bean class="org.springframework.security.ldap.authentication.PasswordComparisonAuthenticator">
                <constructor-arg>
                    <ref bean="springSecurityContextSource"/>
                </constructor-arg>
                <!--ldap服务器密码对应的属性名 默认就是userPassword-->
                <property name="passwordAttributeName" value="userPassword"/>
                <!--因为PasswordComparisonAuthenticator这个类会对密码进行ascii编码，所以设置下面这个属性就会自动进行解码
                    另一种方法就是不用这个类，而是用BindComparisonAuthenticator类-->
                <!--usePasswordAttrCompare是设置密码比对方式，如果返回的属性有密码，就设为true，否则设为false-->
                <property name="usePasswordAttrCompare" value="true"/>
                <property name="userDnPatterns">
                    <list>
                        <value>uid={0}</value>
                    </list>
                </property>
                <property name="userSearch">
                    <ref bean="filterBasedLdapUserSearch"/>
                </property>
            </bean>
            <!--<bean class="org.springframework.security.ldap.authentication.UserDetailsServiceLdapAuthoritiesPopulator">-->
            <!--<constructor-arg name="userService">-->
            <!--<bean class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">-->
            <!--</bean>-->
            <!--</constructor-arg>-->
            <!--</bean>-->
        </constructor-arg>
        <constructor-arg index="1">
            <ref bean="authoritiesPopulator"></ref>
        </constructor-arg>
        <!--如果需要返回一个实体类对象，需要参考下面重写类自定义实现相关接口，因为项目中没有需要返回用户实体，所以基于已有的实现方式即可-->
        <!--<property name="userDetailsContextMapper">-->
        <!--<bean class="com.ppms.ldapLogin.util.CustomLdapUserDetailsMapper"></bean>-->
        <!--</property>-->
    </bean>



</beans>